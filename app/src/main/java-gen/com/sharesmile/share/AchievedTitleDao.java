package com.sharesmile.share;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sharesmile.share.AchievedTitle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACHIEVED_TITLE".
*/
public class AchievedTitleDao extends AbstractDao<AchievedTitle, Long> {

    public static final String TABLENAME = "ACHIEVED_TITLE";

    /**
     * Properties of entity AchievedTitle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServerId = new Property(1, long.class, "serverId", false, "SERVER_ID");
        public final static Property TitleId = new Property(2, int.class, "titleId", false, "TITLE_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property CategoryId = new Property(4, long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property CategoryName = new Property(5, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property AchievedTime = new Property(6, java.util.Date.class, "achievedTime", false, "ACHIEVED_TIME");
        public final static Property BadgeType = new Property(7, String.class, "badgeType", false, "BADGE_TYPE");
        public final static Property UserId = new Property(8, long.class, "userId", false, "USER_ID");
        public final static Property IsSync = new Property(9, boolean.class, "isSync", false, "IS_SYNC");
    };


    public AchievedTitleDao(DaoConfig config) {
        super(config);
    }
    
    public AchievedTitleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACHIEVED_TITLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SERVER_ID\" INTEGER NOT NULL ," + // 1: serverId
                "\"TITLE_ID\" INTEGER NOT NULL ," + // 2: titleId
                "\"TITLE\" TEXT NOT NULL ," + // 3: title
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 4: categoryId
                "\"CATEGORY_NAME\" TEXT NOT NULL ," + // 5: categoryName
                "\"ACHIEVED_TIME\" INTEGER NOT NULL ," + // 6: achievedTime
                "\"BADGE_TYPE\" TEXT NOT NULL ," + // 7: badgeType
                "\"USER_ID\" INTEGER NOT NULL ," + // 8: userId
                "\"IS_SYNC\" INTEGER NOT NULL );"); // 9: isSync
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACHIEVED_TITLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AchievedTitle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getServerId());
        stmt.bindLong(3, entity.getTitleId());
        stmt.bindString(4, entity.getTitle());
        stmt.bindLong(5, entity.getCategoryId());
        stmt.bindString(6, entity.getCategoryName());
        stmt.bindLong(7, entity.getAchievedTime().getTime());
        stmt.bindString(8, entity.getBadgeType());
        stmt.bindLong(9, entity.getUserId());
        stmt.bindLong(10, entity.getIsSync() ? 1L: 0L);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AchievedTitle readEntity(Cursor cursor, int offset) {
        AchievedTitle entity = new AchievedTitle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // serverId
            cursor.getInt(offset + 2), // titleId
            cursor.getString(offset + 3), // title
            cursor.getLong(offset + 4), // categoryId
            cursor.getString(offset + 5), // categoryName
            new java.util.Date(cursor.getLong(offset + 6)), // achievedTime
            cursor.getString(offset + 7), // badgeType
            cursor.getLong(offset + 8), // userId
            cursor.getShort(offset + 9) != 0 // isSync
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AchievedTitle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.getLong(offset + 1));
        entity.setTitleId(cursor.getInt(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setCategoryId(cursor.getLong(offset + 4));
        entity.setCategoryName(cursor.getString(offset + 5));
        entity.setAchievedTime(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setBadgeType(cursor.getString(offset + 7));
        entity.setUserId(cursor.getLong(offset + 8));
        entity.setIsSync(cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AchievedTitle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AchievedTitle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
