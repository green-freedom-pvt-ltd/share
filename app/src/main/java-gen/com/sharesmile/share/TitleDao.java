package com.sharesmile.share;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sharesmile.share.Title;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TITLE".
*/
public class TitleDao extends AbstractDao<Title, Long> {

    public static final String TABLENAME = "TITLE";

    /**
     * Properties of entity Title.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TitleId = new Property(1, int.class, "titleId", false, "TITLE_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property CategoryId = new Property(3, int.class, "categoryId", false, "CATEGORY_ID");
        public final static Property Category = new Property(4, String.class, "category", false, "CATEGORY");
        public final static Property GoalNStars = new Property(5, int.class, "goalNStars", false, "GOAL_NSTARS");
        public final static Property ImageUrl = new Property(6, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property WinningMessage = new Property(7, String.class, "winningMessage", false, "WINNING_MESSAGE");
        public final static Property Description_1 = new Property(8, String.class, "description_1", false, "DESCRIPTION_1");
        public final static Property Description_2 = new Property(9, String.class, "description_2", false, "DESCRIPTION_2");
        public final static Property Description_3 = new Property(10, String.class, "description_3", false, "DESCRIPTION_3");
        public final static Property Share_message = new Property(11, String.class, "share_message", false, "SHARE_MESSAGE");
        public final static Property BadgeType = new Property(12, String.class, "badgeType", false, "BADGE_TYPE");
    };


    public TitleDao(DaoConfig config) {
        super(config);
    }
    
    public TitleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TITLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE_ID\" INTEGER NOT NULL ," + // 1: titleId
                "\"TITLE\" TEXT NOT NULL ," + // 2: title
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 3: categoryId
                "\"CATEGORY\" TEXT NOT NULL ," + // 4: category
                "\"GOAL_NSTARS\" INTEGER NOT NULL ," + // 5: goalNStars
                "\"IMAGE_URL\" TEXT," + // 6: imageUrl
                "\"WINNING_MESSAGE\" TEXT NOT NULL ," + // 7: winningMessage
                "\"DESCRIPTION_1\" TEXT," + // 8: description_1
                "\"DESCRIPTION_2\" TEXT," + // 9: description_2
                "\"DESCRIPTION_3\" TEXT," + // 10: description_3
                "\"SHARE_MESSAGE\" TEXT," + // 11: share_message
                "\"BADGE_TYPE\" TEXT NOT NULL );"); // 12: badgeType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TITLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Title entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTitleId());
        stmt.bindString(3, entity.getTitle());
        stmt.bindLong(4, entity.getCategoryId());
        stmt.bindString(5, entity.getCategory());
        stmt.bindLong(6, entity.getGoalNStars());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
        stmt.bindString(8, entity.getWinningMessage());
 
        String description_1 = entity.getDescription_1();
        if (description_1 != null) {
            stmt.bindString(9, description_1);
        }
 
        String description_2 = entity.getDescription_2();
        if (description_2 != null) {
            stmt.bindString(10, description_2);
        }
 
        String description_3 = entity.getDescription_3();
        if (description_3 != null) {
            stmt.bindString(11, description_3);
        }
 
        String share_message = entity.getShare_message();
        if (share_message != null) {
            stmt.bindString(12, share_message);
        }
        stmt.bindString(13, entity.getBadgeType());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Title readEntity(Cursor cursor, int offset) {
        Title entity = new Title( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // titleId
            cursor.getString(offset + 2), // title
            cursor.getInt(offset + 3), // categoryId
            cursor.getString(offset + 4), // category
            cursor.getInt(offset + 5), // goalNStars
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imageUrl
            cursor.getString(offset + 7), // winningMessage
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // description_1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // description_2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // description_3
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // share_message
            cursor.getString(offset + 12) // badgeType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Title entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitleId(cursor.getInt(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setCategoryId(cursor.getInt(offset + 3));
        entity.setCategory(cursor.getString(offset + 4));
        entity.setGoalNStars(cursor.getInt(offset + 5));
        entity.setImageUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWinningMessage(cursor.getString(offset + 7));
        entity.setDescription_1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDescription_2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDescription_3(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setShare_message(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBadgeType(cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Title entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Title entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
