package com.sharesmile.share;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sharesmile.share.Badge;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BADGE".
*/
public class BadgeDao extends AbstractDao<Badge, Long> {

    public static final String TABLENAME = "BADGE";

    /**
     * Properties of entity Badge.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BadgeId = new Property(1, Integer.class, "badgeId", false, "BADGE_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property NoOfStars = new Property(5, Integer.class, "noOfStars", false, "NO_OF_STARS");
        public final static Property ImageUrl = new Property(6, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Description1 = new Property(7, String.class, "description1", false, "DESCRIPTION1");
        public final static Property Description2 = new Property(8, String.class, "description2", false, "DESCRIPTION2");
        public final static Property Description3 = new Property(9, String.class, "description3", false, "DESCRIPTION3");
        public final static Property BadgeParameter = new Property(10, String.class, "badgeParameter", false, "BADGE_PARAMETER");
        public final static Property BadgeParameterCheck = new Property(11, String.class, "badgeParameterCheck", false, "BADGE_PARAMETER_CHECK");
    };


    public BadgeDao(DaoConfig config) {
        super(config);
    }
    
    public BadgeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BADGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BADGE_ID\" INTEGER," + // 1: badgeId
                "\"TYPE\" TEXT," + // 2: type
                "\"CATEGORY\" TEXT," + // 3: category
                "\"NAME\" TEXT," + // 4: name
                "\"NO_OF_STARS\" INTEGER," + // 5: noOfStars
                "\"IMAGE_URL\" TEXT," + // 6: imageUrl
                "\"DESCRIPTION1\" TEXT," + // 7: description1
                "\"DESCRIPTION2\" TEXT," + // 8: description2
                "\"DESCRIPTION3\" TEXT," + // 9: description3
                "\"BADGE_PARAMETER\" TEXT," + // 10: badgeParameter
                "\"BADGE_PARAMETER_CHECK\" TEXT);"); // 11: badgeParameterCheck
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BADGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Badge entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer badgeId = entity.getBadgeId();
        if (badgeId != null) {
            stmt.bindLong(2, badgeId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Integer noOfStars = entity.getNoOfStars();
        if (noOfStars != null) {
            stmt.bindLong(6, noOfStars);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
 
        String description1 = entity.getDescription1();
        if (description1 != null) {
            stmt.bindString(8, description1);
        }
 
        String description2 = entity.getDescription2();
        if (description2 != null) {
            stmt.bindString(9, description2);
        }
 
        String description3 = entity.getDescription3();
        if (description3 != null) {
            stmt.bindString(10, description3);
        }
 
        String badgeParameter = entity.getBadgeParameter();
        if (badgeParameter != null) {
            stmt.bindString(11, badgeParameter);
        }
 
        String badgeParameterCheck = entity.getBadgeParameterCheck();
        if (badgeParameterCheck != null) {
            stmt.bindString(12, badgeParameterCheck);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Badge readEntity(Cursor cursor, int offset) {
        Badge entity = new Badge( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // badgeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // noOfStars
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imageUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // description2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // description3
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // badgeParameter
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // badgeParameterCheck
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Badge entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBadgeId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNoOfStars(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setImageUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDescription2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDescription3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBadgeParameter(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBadgeParameterCheck(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Badge entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Badge entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
