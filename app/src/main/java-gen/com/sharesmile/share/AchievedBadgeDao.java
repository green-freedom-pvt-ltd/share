package com.sharesmile.share;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sharesmile.share.AchievedBadge;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACHIEVED_BADGE".
*/
public class AchievedBadgeDao extends AbstractDao<AchievedBadge, Long> {

    public static final String TABLENAME = "ACHIEVED_BADGE";

    /**
     * Properties of entity AchievedBadge.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property BadgeId = new Property(2, Integer.class, "badgeId", false, "BADGE_ID");
        public final static Property BadgeType = new Property(3, String.class, "badgeType", false, "BADGE_TYPE");
        public final static Property CauseId = new Property(4, String.class, "causeId", false, "CAUSE_ID");
        public final static Property Category = new Property(5, String.class, "category", false, "CATEGORY");
        public final static Property CategoryStatus = new Property(6, String.class, "categoryStatus", false, "CATEGORY_STATUS");
        public final static Property ParamDone = new Property(7, String.class, "paramDone", false, "PARAM_DONE");
    };


    public AchievedBadgeDao(DaoConfig config) {
        super(config);
    }
    
    public AchievedBadgeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACHIEVED_BADGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"BADGE_ID\" INTEGER," + // 2: badgeId
                "\"BADGE_TYPE\" TEXT," + // 3: badgeType
                "\"CAUSE_ID\" TEXT," + // 4: causeId
                "\"CATEGORY\" TEXT," + // 5: category
                "\"CATEGORY_STATUS\" TEXT," + // 6: categoryStatus
                "\"PARAM_DONE\" TEXT);"); // 7: paramDone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACHIEVED_BADGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AchievedBadge entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Integer badgeId = entity.getBadgeId();
        if (badgeId != null) {
            stmt.bindLong(3, badgeId);
        }
 
        String badgeType = entity.getBadgeType();
        if (badgeType != null) {
            stmt.bindString(4, badgeType);
        }
 
        String causeId = entity.getCauseId();
        if (causeId != null) {
            stmt.bindString(5, causeId);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(6, category);
        }
 
        String categoryStatus = entity.getCategoryStatus();
        if (categoryStatus != null) {
            stmt.bindString(7, categoryStatus);
        }
 
        String paramDone = entity.getParamDone();
        if (paramDone != null) {
            stmt.bindString(8, paramDone);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AchievedBadge readEntity(Cursor cursor, int offset) {
        AchievedBadge entity = new AchievedBadge( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // badgeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // badgeType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // causeId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // category
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // categoryStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // paramDone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AchievedBadge entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setBadgeId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBadgeType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCauseId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCategory(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategoryStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setParamDone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AchievedBadge entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AchievedBadge entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
